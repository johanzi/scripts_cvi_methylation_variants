#!/bin/bash

###########################################################################
#
# Organized functions to analyze BS-seq data with Bismark
#
# Author: Johan Zicola
# Email: johan.zicola@gmail.com
# Date: 2020-08-23
# 
###########################################################################


# Usage function

usage="$(basename "$0") [-h] -1 alignment.fastq [-2 alignment2.fastq] -r /path/to/reference/fasta/ -o /path/to/output/ \n
Description: Pipeline to process fastq file(s) from plants with bismark.\n
\n
Arguments:\n
    -h  show this help text\n
    -r 	path to directory containing the fasta file for bismark reference (provide absolute path) \n
    -1 	fastq file (provide absolute path)\n
	-2 	(optional) fastq file for #2 mates in case of paired-end sequencing (provide absolute path)\n
	-o 	output directory (will contain all files generated by the pipeline). Provide either relative or absolute path \n
	-l  (optional) light version so that most intermediary files are erased (for people with disk space limitations)\n
	Note that if no output directory is provided, directory of fastq file 1 will be used as output directory.\n
\n
\n
Output files: \n
- bismark genome indexing files in the directory containing the reference fasta file\n
- alignment from bismark (_bismark_bt2.bam)\n
- deduplicated alignment from bismark (_bismark_bt2.deduplicated.bam)\n
- coverage file for all contexts together (_bismark_bt2.deduplicated.bismark.cov.gz)\n
- bedGraph file for all contexts together (_bismark_bt2.deduplicated.bedGraph.gz)\n 
- coverage files for each each context (CpG_context_*_bismark_bt2.deduplicated.txt.gz.bismark.cov.gz, CHG_context_*_bismark_bt2.deduplicated.txt.gz.bismark.cov.gz, CHH_context_*_bismark_bt2.deduplicated.txt.gz.bismark.cov.gz)\n
- bedGraph files for each each context (CpG_context_*_bismark_bt2.deduplicated.txt.gz.bedGraph.gz, CHG_context_*_bismark_bt2.deduplicated.txt.gz.bedGraph.gz, CHH_context_*_bismark_bt2.deduplicated.txt.gz.bedGraph.gz)\n
- cytosine report files for each context (_bismark_bt2.deduplicated.bismark.cov.gz.CpG_report.txt, 
_bismark_bt2.deduplicated.bismark.cov.gz.CHG_report.txt, _bismark_bt2.deduplicated.bismark.cov.gz.CHH_report.txt)\n
- cytosine report_only_chr files for each context for the chromosomes only (i.e. chloroplast and mitochondria removed) (_bismark_bt2.deduplicated.bismark.cov.gz.CpG_report_only_chr.txt, 
_bismark_bt2.deduplicated.bismark.cov.gz.CHG_report_only_chr.txt, _bismark_bt2.deduplicated.bismark.cov.gz.CHH_report_only_chr.txt)\n
- conversion efficiency in % based on chloroplast C to T conversion (_bismark_bt2.deduplicated.bismark.cov.gz.CX_report.conversion_efficiency.txt)\n
\n
Note: chloroplast should be named 'chloroplast' and mitochondria 'mitochondria' in the reference fasta file (e.g. sed -i 's/Ct/chloroplast/g' <file.fastq>)
"

###########################################################################
############################# Arguments ###################################
###########################################################################



# Definition
# h: help display
# 1: fastq file input
# 2: second fastq file in case the data are paired-end
# r: fasta reference file
# o: name output directory
# l: light option (remove intermediary files)

while getopts "h?:1:2:r:o:l" arg; do
	case $arg in
		h|\?) 
			echo -e $usage | fold -s -w 100
			exit 0
			;;
		1) 
			if [ ! -e $OPTARG ]; then
				echo "Fastq file incorrect or not existing"
				exit 1
			elif [ -d $OPTARG ]; then
				echo "Fastq file argument is a directory. Provide a fastq file instead"
				exit 1
			else
				fastq=$OPTARG
				only_fastq=$(basename $fastq)
				path_fastq=$(dirname $fastq)
			fi
			;;			
		2)
			if [ ! -e $OPTARG ]; then
				echo "Fastq file #2 mates incorrect or not existing"
				exit 1
			elif [ -d $OPTARG ]; then
				echo "Fastq file #2 mates argument is a directory. Provide a fastq file instead"
				exit 1
			else
				fastq2=$OPTARG
			fi
			;;
		r)
			
			if [ ! -d $OPTARG ]; then
				echo "Path to fasta file incorrect or not existing"
				exit 1
			else
				# Remove final slash if path given with final slash
				path_fasta=${OPTARG%/}
			fi
			;;
		o)
			if [ ! -d $OPTARG ]; then
				echo "Path to output directory incorrect or not existing"
				exit 1
			else
				# Test if the path is an absolute path
				if [[ "$OPTARG" = /* ]]; then
					# Remove final slash of the path if any
					path_output=${OPTARG%/}
				else
					echo "Path to output is a relative path. Provide an absolute path."
					exit 1
				fi	
			fi
			;;
		l) light_mode=1
			;;
	esac
done


if [ $OPTIND -eq 1 ]; then 
	echo -e "\n!!!!!!!!!!!!No options were passed!!!!!!!!!!!!!!!!\n"
	echo -e $usage | fold -s -w 80
	exit 0
fi

# Set output directory. Take path of fastq file if -o not 
# provided by user
if [ -z $path_output ]; then
	# Remove final slash if any
	path_output=${path_fastq%/}
fi

# Display arguments defined by user
echo "Output directory: $path_output"

echo "Fastq file: $fastq"

if [ ! -z ${fastq2} ]; then
	echo "Fastq file 2: $fastq2"
else
	echo "Fastq file 2: No 2nd fastq file provided, data are assumed to be single end"
fi

echo "Path to reference fasta file: $path_fasta"


# Path to bismark directory
path_bismark="/srv/netscratch/irg/grp_hancock/bin/Bismark_v0.19.0/"

if [ ! -d $path_bismark ]; then
	echo "Path to bismark $path_bismark incorrect"
	echo "Please provide valid path"
	exit 1
fi

# Check installed softwares
for i in {samtools,zgrep}; do
	command -v $i >/dev/null 2>&1 || { echo >&2 "$i is not installed.  Aborting."; exit 1; }
done

###########################################################################
#########################   Bismark pipeline   ############################
###########################################################################


echo -e "\n#################### STEP 1: GENOME PREPARATION ####################\n"

# Generate Bismark reference if not done
if [ -d ${path_fasta}/Bisulfite_Genome/ ]; then
	echo "Reference for ${path_fasta} already exists"
	echo -e "Skip bismark_genome_preparation step\n"
elif [ ! -d ${path_fasta}/Bisulfite_Genome/ ]; then
	echo -e "Run ${path_bismark}bismark_genome_preparation --bowtie2 $path_fasta \n"
	${path_bismark}bismark_genome_preparation --bowtie2 $path_fasta
fi


echo -e "\n#################### STEP 2: BISMARK MAPPING ####################\n"

# Per default, bismark output takes the name of the fastq file, removes
# the extension and replace by "_bismark_bt2.bam". When paired-end mapping is done
# bismark add the extension "_bismark_bt2_pe.bam. Rename the output to get consistent name
# w/o '_pe' extension

# Note that for paired-end files, the prefix will be per default the name of the read1 without the extension ".fastq"
# Beware not to use another dot in the fastq file. For instance, file1.R1.fastq should be renamed file1_R1.fastq
# All output will have then the prefix "file1_R1".

# Get Part of fastq file without extension
name_file=$(echo $only_fastq | cut -d'.' -f1)

echo "Name file is $name_file"

# Bismark mapping
if [ -e ${path_output}/${name_file}_bismark_bt2.bam ]; then
	echo "Bismark already run for $fastq"
	echo "Output file is ${path_output}/${name_file}_bismark_bt2.bam"
	echo -e "Skip bismark step\n"
# Mapping for single-end data (only 1 fastq file provided). $fastq2 string is empty
elif [ ! -e ${path_output}/${name_file}_bismark_bt2.bam  ] && [ -z $fastq2 ]; then
	echo -e "Run ${path_bismark}bismark --bowtie2 -N 1 --output_dir $path_output  $path_fasta $fastq \n"
	${path_bismark}bismark --bowtie2 -N 1 --output_dir $path_output $path_fasta $fastq
# Mapping for paired-end data (2 fastq files provided). $fastq2 string is not empty
elif [ ! -e ${path_output}/${name_file}.bam  ] && [ ! -z $fastq2 ]; then
	echo -e "Run ${path_bismark}bismark --bowtie2 -N 1 --output_dir $path_output  $path_fasta -1 $fastq -2 $fastq2 \n"
	${path_bismark}bismark --bowtie2 -N 1 --output_dir $path_output $path_fasta -1 $fastq -2 $fastq2
	# Rename output bam file not to have '_pe' suffix (generate otherwise conflicts with next steps)
	mv -v ${path_output}/${name_file}_bismark_bt2_pe.bam ${path_output}/${name_file}_bismark_bt2.bam
fi


echo -e "\n#################### STEP 3: REMOVE DUPLICATES ####################\n"

# Remove duplicate reads
if [ -e ${path_output}/${name_file}_bismark_bt2.deduplicated.bam ]; then
	echo "${path_output}/${name_file}_bismark_bt2.deduplicated.bam already existing"
	echo -e "Skip deduplicate step\n"
else
	# SE data
	if [ -z $fastq2 ]; then
		echo -e "Run ${path_bismark}deduplicate_bismark --single --bam --output_dir $path_output  ${path_output}/${name_file}_bismark_bt2.bam \n"
		${path_bismark}deduplicate_bismark --single --bam --output_dir $path_output ${path_output}/${name_file}_bismark_bt2.bam
	# Mapping for paired-end data (2 fastq files provided). $fastq2 string is not empty
	elif [ ! -z $fastq2 ]; then
		echo -e "Run ${path_bismark}deduplicate_bismark --paired --bam --output_dir $path_output  ${path_output}/${name_file}_bismark_bt2.bam \n"
		${path_bismark}deduplicate_bismark --paired --bam --output_dir $path_output ${path_output}/${name_file}_bismark_bt2.bam
	fi
	
	# Check if file successfully created
	if [ -e ${path_output}/${name_file}_bismark_bt2.deduplicated.bam ]; then
		echo -e "${path_output}/${name_file}_bismark_bt2.deduplicated.bam successfully created\n"
	else
		echo -e "Deduplication did not work. End program.\n"
		exit 1
	fi
	
	# A report is generated but needs to be renamed to be processed for summarizing by bismark2summary
	if [ -e ${path_output}/${name_file}_bismark_bt2.deduplication_report.txt ]; then
		mv ${path_output}/${name_file}_bismark_bt2.deduplication_report.txt ${path_output}/${name_file}_bismark_bt2.deduplication_report.txt
	fi
fi

# Remove bam if light mode on
# Since the command bismark2summary needs the presence of this file (even if it does not use it)
# we need to create an empty file with the same name just to avoid a bug
if [[ $light_mode == 1 ]]; then
	# Delete the file
	rm -v ${path_output}/${name_file}_bismark_bt2.bam
	# Create dummy file
	echo -e "Create dummy empty file for bismark2summary.\n"
	echo -e "touch ${path_output}/${name_file}_bismark_bt2.bam\n"
	touch ${path_output}/${name_file}_bismark_bt2.bam
fi

echo -e "\n#################### STEP 4: bismark_methylation_extractor ####################\n"

# Output files of bismark_methylation_extractor:
# 3 files  will be generated: one for each methylation context
# They have the prefixes CHG_context_, CpG_context_, and CHH_context_
# The .bam suffix is removed and replaced by .txt.gz
name_file_only=$(basename ${path_output}/${name_file}_bismark_bt2.deduplicated.bam)
name_file_result=$(echo $name_file_only | sed 's/bam/txt.gz/')

CpG_file="${path_output}/CpG_context_${name_file_result}"
CHG_file="${path_output}/CHG_context_${name_file_result}"
CHH_file="${path_output}/CHH_context_${name_file_result}"

# In addition, one .bedGraph.gz and one .bismark.cov.gz will be generated and contain
# coverage information and methylation status for all contexts together
CX_file_bG="${path_output}/${name_file}_bismark_bt2.deduplicated.bedGraph.gz"
CX_file_cov="${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz"


# Perform bismark_methylation_extractor if any of the output file is missing

# If light_mode on, bedGraph files are deleted after the generation of cytosine report files (the bedGraph are required intermediary files)

if [ -e $CpG_file ] && [ -e $CHG_file ] && [ -e $CHH_file ] && [ -e $CX_file_bG ] && [ -e $CX_file_cov ]; then
	echo -e "The 5 output files from bismark_methylation_extractor already exist:\n $CpG_file \n $CHG_file \n $CHH_file \n $CX_file_bG \n $CX_file_cov"
	echo -e "Skip bismark_methylation_extractor step\n"
else
	# SE data
	if [ -z $fastq2 ]; then
		echo -e "Run ${path_bismark}bismark_methylation_extractor --buffer_size 10G -o $path_output --single-end --gzip --comprehensive --CX --bedGraph --counts ${path_output}/${name_file}_bismark_bt2.deduplicated.bam \n"
		${path_bismark}bismark_methylation_extractor --buffer_size 10G -o $path_output --single-end --gzip --comprehensive --CX --bedGraph --counts ${path_output}/${name_file}_bismark_bt2.deduplicated.bam
	# PE data
	elif [ ! -z $fastq2 ]; then
		echo -e "Run ${path_bismark}bismark_methylation_extractor --buffer_size 10G -o $path_output --paired-end --gzip --comprehensive --CX --bedGraph --counts ${path_output}/${name_file}_bismark_bt2.deduplicated.bam \n"
		${path_bismark}bismark_methylation_extractor --buffer_size 10G -o $path_output --paired-end --gzip --comprehensive --CX --bedGraph --counts ${path_output}/${name_file}_bismark_bt2.deduplicated.bam
	fi
fi


echo -e "\n#################### STEP 5: OPTIONAL: GENERATE INDIVIDUAL COVERAGE FILES ####################\n"

# Generate bedGraph and cov files for each methylation context, independently
# This allows to quickly view the level of methylation on a Genome Browser (bedGraph file in IGV, cov file in SeqMonk)
# per methylation context. Do not generate these files if the mode "light" is chosen (go faster and save disk space)

# Do not generate cov and bedGraph files in light_mode
if [[ $light_mode == 1 ]]; then
	echo -e "Light mode on, skip this step\n"
else
	# Coverage file should be named as result files from bismark_methylation_extractor + .bismark.cov.gz extension
	CpG_file_cov="CpG_context_${name_file_result}.bismark.cov.gz"
	CHG_file_cov="CHG_context_${name_file_result}.bismark.cov.gz"
	CHH_file_cov="CHH_context_${name_file_result}.bismark.cov.gz"

	# Name output bedGraph files will be:
	# CpG_context_${name_file_result}.bedGraph.gz"
	# CHG_context_${name_file_result}.bedGraph.gz"
	# CHH_context_${name_file_result}.bedGraph.gz"

	# Generate Coverage and bedGraph files from analysis files for each context if missing.
	# bismark2bedGraph needs the name of the output file to work but requires the extension bedGraph for
	# proper naming. If only name of the input file is given, it will overwrite it

	for context in {CpG,CHG,CHH}; do
		result_file="${path_output}/${context}_context_${name_file_result}"
		file_cov="${context}_context_${name_file_result}.bismark.cov.gz"
		if [ -e $result_file ] && [ ! -e $path_output/$file_cov ]; then
			echo -e "Run ${path_bismark}bismark2bedGraph -o ${context}_context_${name_file_result}.bedGraph --dir $path_output --CX --counts $result_file \n"
			${path_bismark}bismark2bedGraph -o ${context}_context_${name_file_result}.bedGraph --dir $path_output --CX --counts $result_file
		elif [ -e $path_output/$file_cov ]; then
			echo "bismark2bedGraph already generated $path_output/$file_cov"
			echo -e "Skip bismark2bedGraph \n" 
		fi
	done
fi

echo -e "\n#################### STEP 6: GENERATE CYTOSINE REPORTS ####################\n"


# Note that for the command coverage2cytosine, the location of the input file should be given as absolute path.
# The variable $path_output should therefore be an absolute path
# The variable $path_fasta should also be an absolute path (mentioned in coverage2cytosine help menu)

# 1 cytosine report should be generated in this step:
CX_file_report="${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CX_report.txt"

# This file is generated using the $CX_file_cov file generated at step 5

# This file contains all positions (Chr, start), strand, nb of reads supporting methylated C, nb of reads supporting
# unmethylated C, context, tri-nucleotide context

# General report containing all contexts together (cov file generated in step 5)
# The name of the output ($CX_file_cov) will receive automatically the suffix ".CX_report.txt" to become $CX_file_report
if [ -e $CX_file_cov ] && [ ! -e $CX_file_report ]; then
	echo "Run ${path_bismark}coverage2cytosine -o $CX_file_cov --dir $path_output --CX --genome_folder $path_fasta $CX_file_cov"
	${path_bismark}coverage2cytosine -o $CX_file_cov --dir $path_output --CX --genome_folder $path_fasta $CX_file_cov
elif [ -e $CX_file_report* ]; then
	echo "coverage2cytosine already run on $CX_file_cov"
	echo "file $path_output/$CX_file_report already exists"
	echo -e "Skip coverage2cytosine \n"
fi

#########################

# Generate CpG, CHG, and CHH cytosine reports to use as input files for methylKit
# Output files should be:
# ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CpG_report.txt
# ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CHG_report.txt
# ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CHH_report.txt

# prefix file report name
prefix_report="${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz."

# Important to have no spaces between the range items!
for context in {CpG,CHG,CHH}; do 
	if [ -e ${prefix_report}${context}_report.txt ]; then
		echo "${prefix_report}${context}_report.txt already exists"
	elif [ ! -e ${prefix_report}${context}_report.txt  ]; then
		echo "Generate $context cytosine report:"
		# Rename context variables as bismark uses CG while methylKit uses CpG
		# For CHG and CHH, same context names used in the 2 softwares
		if [ $context ==  "CpG" ]; then
			context_search="CG"
		else
			context_search=$context
		fi
		echo -e "Run grep -a -w $context_search $CX_file_report > ${prefix_report}${context}_report.txt  \n"
		grep -a -w $context_search $CX_file_report > ${prefix_report}${context}_report.txt 
	fi
done

#########################

echo -e "\nGenerate cytosine reports without chloroplasts and mitochondria\n"

# Generate cytosine report version without chloroplast or mitochondria (to be used in methylKit)
# Output files should be:
# ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CpG_report_only_chr.txt
# ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CHG_report_only_chr.txt
# ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CHH_report_only_chr.txt
# ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CX_report_only_chr.txt

# Add wildcard in case the files were compressed so they are not recreated
for context in {CpG,CHG,CHH,CX}; do 
	if [ -e ${prefix_report}${context}_report_only_chr.txt ]; then
		echo "$CX_${context}_report_only_chr.txt already exists"
	elif [ ! -e ${prefix_report}${context}_report_only_chr.txt ]; then
		echo "Generate $context cytosine report without chloroplast and mitochondria:"
		echo -e "grep -a -v "chloroplast" ${prefix_report}${context}_report.txt | grep -v "mitochondria" - > ${prefix_report}${context}_report_only_chr.txt\n"
		grep -a -v "chloroplast" ${prefix_report}${context}_report.txt | grep -v "mitochondria" - > ${prefix_report}${context}_report_only_chr.txt 
	fi
done


echo -e "\n#################### STEP 7: CALCULATE CONVERSION EFFICIENCY ####################\n"

echo -e "Conversion efficiency is calculated using all positions called at the chloroplast. The total number of methylated cytosine call is divided by the total number of cytosine call (weighted methylation mean). Values are given in %. Note that good bisulfite conversion should yield >99% converted cytosines.\n" | fold -s
		
# Name of conversion report should be:
conversion_report="${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CX_report.conversion_efficiency.txt"

if [ -e $conversion_report ]; then
	echo "$conversion_report already exists."
	echo -e "Skip this step.\n"
elif [ ! -e $conversion_report ] && [ -e $CX_file_report ]; then
	# Check if the $CX_file_report contains values matching to "chloroplast"
	if [[ $(grep -a "chloroplast" $CX_file_report | head) == "" ]]; then 
		echo -e "No values found in 'chloroplast' in $CX_file_report\n
		verify that 'chloroplast' is used as name in the reference fasta file"
		exit 1
	fi
	echo -e "Calculate conversion efficiency from $CX_file_report\n"
	values=$(grep -a "chloroplast" $CX_file_report  | awk -v OFS='\t' '{ meth += $4; unmeth += $5 } END { print meth, unmeth, (1-(meth/(meth+unmeth)))*100 }')
	echo -e "methylated_count\tunmethylated_count\tconversion_efficiency" > $conversion_report
	echo "${values}%" >> $conversion_report
	echo "$conversion_report generated"
fi


# Remove files containing chloroplasts as we don't use them in methylKit
if [[ $light_mode == 1 ]]; then
	echo -e "Delete the following files (light mode):\n"
	rm -v $CX_file_report
	rm -v ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CpG_report.txt
	rm -v ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CHG_report.txt
	rm -v ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CHH_report.txt
	rm -v ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz.CX_report.txt	
	rm -v ${path_output}/${name_file}_bismark_bt2.deduplicated.bismark.cov.gz
	rm -v ${path_output}/${name_file}_bismark_bt2.deduplicated.bedGraph.gz
	rm -v ${path_output}/CpG_context_${name_file}_bismark_bt2.deduplicated.txt.gz
	rm -v ${path_output}/CHG_context_${name_file}_bismark_bt2.deduplicated.txt.gz
	rm -v ${path_output}/CHH_context_${name_file}_bismark_bt2.deduplicated.txt.gz
fi

echo -e "\n############################# END OF THE PIPELINE ###########################\n"

echo -e "$fastq has been processed successfully\n"


